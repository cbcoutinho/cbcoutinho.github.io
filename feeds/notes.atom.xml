<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chris' blog - Notes</title><link href="https://blog.coutinho.io/" rel="alternate"></link><link href="https://blog.coutinho.io/feeds/notes.atom.xml" rel="self"></link><id>https://blog.coutinho.io/</id><updated>2023-07-10T16:18:47+02:00</updated><entry><title>OAuth2 Kakfa and Python</title><link href="https://blog.coutinho.io/oauth2-kakfa-and-python.html" rel="alternate"></link><published>2023-07-10T00:00:00+02:00</published><updated>2023-07-10T16:18:47+02:00</updated><author><name>Chris Coutinho</name></author><id>tag:blog.coutinho.io,2023-07-10:/oauth2-kakfa-and-python.html</id><summary type="html">&lt;p&gt;This post demonstrates how to utilize OAuth2 in &lt;a href="https://faust-streaming.github.io/faust"&gt;Faust
Streaming&lt;/a&gt; applications. Faust is a
streaming library for Python. It provides stream/event processing primitives &lt;em&gt;a
la&lt;/em&gt; Kafka Streams to process Kafka messages in Python.&lt;/p&gt;
&lt;p&gt;Organizations are utilizing OAuth2 for managing federated identities across
service boundaries a centralized manner. With the â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post demonstrates how to utilize OAuth2 in &lt;a href="https://faust-streaming.github.io/faust"&gt;Faust
Streaming&lt;/a&gt; applications. Faust is a
streaming library for Python. It provides stream/event processing primitives &lt;em&gt;a
la&lt;/em&gt; Kafka Streams to process Kafka messages in Python.&lt;/p&gt;
&lt;p&gt;Organizations are utilizing OAuth2 for managing federated identities across
service boundaries a centralized manner. With the introduction of the
&lt;code&gt;OAUTHBEARER&lt;/code&gt; SASL mechanism in Kafka 2.0.0, both brokers and clients can be
configured to use an external identity provider for authentication, making it
easier to manage identities than span across systems.&lt;/p&gt;
&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#authorization-in-kafka"&gt;Authorization in Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#oauth2oidc-authorization"&gt;OAuth2/OIDC Authorization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#oauth2-in-faust-streaming"&gt;OAuth2 in Faust Streaming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="authorization-in-kafka"&gt;Authorization in Kafka&lt;/h1&gt;
&lt;p&gt;Apache Kafka provides an Authorization system based on Access Control Lists
(ACLs). Kafka acls are defined in the general format of "Principal P is
[Allowed/Denied] Operation O From Host H On Resource R". You can read more
about the acl structure on
&lt;a href="https://cwiki.apache.org/confluence/display/KAFKA/KIP-11+-+Authorization+Interface"&gt;KIP-11&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition to SSL encryption, Kafka supports multiple &lt;em&gt;authorization
mechanisms&lt;/em&gt; via the Simple Authentication and Security Layer (SASL) to enable
authentication via third-party servers. This enables Kafka clusters to utilize
industry-standard identity providers for all broker and client authentication
requests.&lt;/p&gt;
&lt;p&gt;Confluent Cloud currently supports the following authorization mechanisms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GSSAPI&lt;/code&gt; (Kerberos)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PLAIN&lt;/code&gt; (Username/Password)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCRAM-SHA&lt;/code&gt; (Zookeeper)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OAUTHBEARER&lt;/code&gt; (OAuth server)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the Confluent documentation on &lt;a href="https://developer.confluent.io/learn-kafka/security/authentication-ssl-and-sasl-ssl/#enabling-sasl-ssl-for-kafka"&gt;Enabling SASL SSL for
Kafka&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OAUTHBEARER&lt;/code&gt; security mechanism enables a Kafka cluster to utilize a
third-party identity provider for authentication. In the case of Confluent
Cloud, setting up an external identity provider is very straight forward,
assuming you're using an OIDC-compliant identity provider (e.g. Azure AD, Okta,
Keycloak). See the
&lt;a href="https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-providers.html"&gt;documentation&lt;/a&gt;
for more information&lt;/p&gt;
&lt;h1 id="oauth2oidc-authorization"&gt;OAuth2/OIDC Authorization&lt;/h1&gt;
&lt;!--source: https://www.azureblue.io/content/images/2020/10/client-cred-flow-1.png--&gt;
&lt;p&gt;&lt;img src="../images/client-cred-flow-1.png" title=""title text"" alt=""title text""&gt;&lt;/p&gt;
&lt;h1 id="oauth2-in-faust-streaming"&gt;OAuth2 in Faust Streaming&lt;/h1&gt;
&lt;p&gt;Here's an example of a streaming application demonstrating how to connect to a
Kafka broker over &lt;code&gt;PLAINTEXT&lt;/code&gt;, essentially anonymous and unencrypted. Our
client is assuming all messages adhere to the &lt;code&gt;Order&lt;/code&gt; schema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;faust&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myapp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kafka://localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;faust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Order for &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Faust recently introduced a new authorization mechanism to support
&lt;code&gt;OAUTHBEARER&lt;/code&gt; authentication in &lt;code&gt;v1.5.0&lt;/code&gt;, enabling Faust Streaming workers to
authenticate to a Kafka broker configured with an identity provider using
OAuth2 Bearer tokens.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;OAUTHBEARER&lt;/code&gt; broker credentials requires that we setup at least a
default SSL context, and provide an instance of &lt;code&gt;AbstractTokenProvider&lt;/code&gt; to the
&lt;code&gt;faust.App&lt;/code&gt; during configuration. The new &lt;code&gt;faust.OAuthCredentials&lt;/code&gt; class
supports a single &lt;code&gt;oauth_cb&lt;/code&gt; attribute for an instance of
&lt;code&gt;AbstractTokenProvider&lt;/code&gt;, which is a class with a single asynchronous method for
retrieving the bearer token. Clients are responsible for managing the entire
token life cycle, such as handling token refreshes, etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;faust&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;aiokafka.conn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AbstractTokenProvider&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;aiokafka.helpers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_ssl_context&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomTokenProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractTokenProvider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;broker_credentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;oauth_cb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CustomTokenProvider&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;ssl_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;create_ssl_context&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faust&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;myapp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;KAFKA_BROKER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;broker_credentials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;broker_credentials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Setting up Model and Agents same as above.&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Notes"></category></entry></feed>